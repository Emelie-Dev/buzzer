Pages =>
 - Home
 - Search
 - Following
 - Reels
 - Inbox
 - Profile
 - Notifications
 - More (settings, saved, history, logout, app theme)


    Home page =>
        Content Box (Menu list)
            - Follow
            - Report
            - Not interested
            - Add to story(optional)
            - Clear display
            - Go to post

 Updates =>
  - Change appearance icon based on theme
  - Add storyborder to fyp profile pictures ✔
  - Pause video when comment section is displayed ✔
  - Fix comment box for reels(clicking of black background) ✔
  - Fix active video when exiting modals from transparent background ✔
  - Remeber to revoke object urls after file upload.
  - Pause active video for all modals.
  - Create analytics page
  - Show email in proile page





General - display, chat , privacy.

Account- profile, password, delete or deactivate , 
Security - security alerts, manage devices, 2-step

Content- notifications, analytics, time management, interactions.


About- terms and policies, report a problem

Authentication- switch account, logout












import styles from '../styles/StoryModal.module.css';
import { IoClose } from 'react-icons/io5';
import { useCallback, useEffect, useRef, useState } from 'react';
import StoryItem from './StoryItem';
import { StoryContent } from './StoryItem';
import ReactDOM from 'react-dom';

export interface Story {
  name: string;
  content: StoryContent[];
  time: string;
}

type StoryModalProps = {
  setViewStory: React.Dispatch<React.SetStateAction<boolean>>;
  itemIndex: number;
};

const stories: Story[] = [
  {
    name: 'userOne',
    content: [
      { type: 'video', src: 'content20' },
      { type: 'image', src: 'content10' },
      { type: 'video', src: 'content25' },
      { type: 'video', src: 'content20' },
      { type: 'video', src: 'content6' },
      { type: 'image', src: 'content8' },
      { type: 'image', src: 'content14' },
    ],
    time: '23 seconds ago',
  },
  {
    name: 'coolGuy',
    content: [
      { type: 'image', src: 'content8' },
      { type: 'video', src: 'content6' },
      { type: 'video', src: 'content21' },
      { type: 'video', src: 'content20' },
      { type: 'video', src: 'content20' },
    ],
    time: '12 hours ago',
  },
  {
    name: 'happy123',
    content: [
      { type: 'image', src: 'content7' },
      { type: 'image', src: 'content3' },
      { type: 'image', src: 'content14' },
      { type: 'video', src: 'content25' },
      { type: 'video', src: 'content24' },
      { type: 'video', src: 'content6' },
      { type: 'video', src: 'content20' },
    ],
    time: '19 seconds ago',
  },
  {
    name: 'sunshineGirl',
    content: [
      { type: 'image', src: 'content16' },
      { type: 'video', src: 'content6' },
    ],
    time: '17 hours ago',
  },
  {
    name: 'codeMaster',
    content: [
      { type: 'image', src: 'content15' },
      { type: 'image', src: 'content10' },
      { type: 'image', src: 'content2' },
      { type: 'video', src: 'content20' },
      { type: 'image', src: 'content1' },
      { type: 'image', src: 'content5' },
      { type: 'image', src: 'content22' },
      { type: 'video', src: 'content25' },
      { type: 'image', src: 'content18' },
    ],
    time: '13 hours ago',
  },
  {
    name: 'skyWalker',
    content: [
      { type: 'image', src: 'content5' },
      { type: 'image', src: 'content7' },
      { type: 'image', src: 'content3' },
      { type: 'video', src: 'content21' },
      { type: 'image', src: 'content13' },
      { type: 'image', src: 'content5' },
      { type: 'video', src: 'content20' },
    ],
    time: '15 hours ago',
  },
  {
    name: 'theArtist',
    content: [
      { type: 'video', src: 'content24' },
      { type: 'video', src: 'content25' },
      { type: 'video', src: 'content20' },
      { type: 'image', src: 'content8' },
      { type: 'video', src: 'content25' },
      { type: 'video', src: 'content21' },
      { type: 'video', src: 'content6' },
      { type: 'image', src: 'content2' },
      { type: 'video', src: 'content24' },
      { type: 'image', src: 'content12' },
    ],
    time: '12 hours ago',
  },
  {
    name: 'jungleKing',
    content: [
      { type: 'video', src: 'content21' },
      { type: 'image', src: 'content3' },
    ],
    time: '17 hours ago',
  },
  {
    name: 'dreamer_98',
    content: [
      { type: 'video', src: 'content25' },
      { type: 'video', src: 'content25' },
      { type: 'image', src: 'content10' },
      { type: 'image', src: 'content11' },
      { type: 'video', src: 'content6' },
      { type: 'video', src: 'content21' },
      { type: 'video', src: 'content24' },
      { type: 'video', src: 'content24' },
      { type: 'image', src: 'content3' },
    ],
    time: '12 minutes ago',
  },
  {
    name: 'techieDude',
    content: [{ type: 'video', src: 'content24' }],
    time: '20 hours ago',
  },
  {
    name: 'cityExplorer',
    content: [
      { type: 'video', src: 'content21' },
      { type: 'image', src: 'content22' },
      { type: 'video', src: 'content6' },
    ],
    time: '15 minutes ago',
  },
  {
    name: 'natureLover',
    content: [
      { type: 'image', src: 'content19' },
      { type: 'image', src: 'content22' },
      { type: 'video', src: 'content25' },
      { type: 'video', src: 'content25' },
      { type: 'image', src: 'content13' },
      { type: 'video', src: 'content6' },
      { type: 'video', src: 'content25' },
      { type: 'video', src: 'content21' },
    ],
    time: '13 seconds ago',
  },
  {
    name: 'mountainView',
    content: [
      { type: 'image', src: 'content15' },
      { type: 'image', src: 'content1' },
      { type: 'video', src: 'content20' },
      { type: 'video', src: 'content24' },
    ],
    time: '22 hours ago',
  },
  {
    name: 'coffeeAddict',
    content: [
      { type: 'image', src: 'content10' },
      { type: 'image', src: 'content8' },
      { type: 'video', src: 'content25' },
      { type: 'video', src: 'content20' },
      { type: 'image', src: 'content3' },
      { type: 'image', src: 'content13' },
      { type: 'video', src: 'content25' },
      { type: 'video', src: 'content20' },
    ],
    time: '18 minutes ago',
  },
  {
    name: 'chefTom',
    content: [
      { type: 'image', src: 'content8' },
      { type: 'image', src: 'content10' },
      { type: 'video', src: 'content20' },
      { type: 'image', src: 'content10' },
      { type: 'image', src: 'content8' },
      { type: 'video', src: 'content21' },
      { type: 'image', src: 'content2' },
      { type: 'image', src: 'content19' },
      { type: 'video', src: 'content6' },
      { type: 'image', src: 'content5' },
    ],
    time: '15 seconds ago',
  },
  {
    name: 'oceanWave',
    content: [
      { type: 'video', src: 'content21' },
      { type: 'video', src: 'content21' },
      { type: 'image', src: 'content8' },
    ],
    time: '6 seconds ago',
  },
  {
    name: 'bookworm101',
    content: [
      { type: 'video', src: 'content6' },
      { type: 'video', src: 'content6' },
      { type: 'video', src: 'content24' },
      { type: 'image', src: 'content9' },
      { type: 'video', src: 'content24' },
      { type: 'video', src: 'content6' },
      { type: 'video', src: 'content20' },
    ],
    time: '17 seconds ago',
  },
  {
    name: 'fastRunner',
    content: [
      { type: 'image', src: 'content22' },
      { type: 'video', src: 'content25' },
      { type: 'video', src: 'content25' },
      { type: 'image', src: 'content17' },
      { type: 'video', src: 'content24' },
      { type: 'video', src: 'content25' },
    ],
    time: '17 minutes ago',
  },
  {
    name: 'digitalNomad',
    content: [
      { type: 'video', src: 'content24' },
      { type: 'video', src: 'content25' },
      { type: 'image', src: 'content17' },
      { type: 'image', src: 'content18' },
      { type: 'image', src: 'content18' },
      { type: 'image', src: 'content7' },
      { type: 'image', src: 'content9' },
    ],
    time: '6 seconds ago',
  },
  {
    name: 'starGazer',
    content: [
      { type: 'image', src: 'content2' },
      { type: 'image', src: 'content19' },
      { type: 'video', src: 'content24' },
      { type: 'image', src: 'content18' },
      { type: 'video', src: 'content6' },
    ],
    time: '20 hours ago',
  },
];

const StoryModal = ({ setViewStory, itemIndex }: StoryModalProps) => {
  const [currentIndex, setCurrentIndex] = useState<number>(itemIndex);
  const [isOperative, setIsOperative] = useState<boolean>(false);

  const carouselRef = useRef<HTMLDivElement>(null!);

  const target = document.getElementById('stories-portal') || document.body;

  useEffect(() => {
    moveToStory(currentIndex, null, null, null, 'initial')();

    if (carouselRef.current)
      carouselRef.current.style.scrollBehavior = 'smooth';
  }, []);

  const moveToStory = useCallback(
    (
        index: number,
        storyItemIndex: number | null,
        contentLength: number | null,
        setContentIndex: React.Dispatch<React.SetStateAction<number>> | null,
        type: 'initial' | 'next' | 'prev' | 'jump'
      ) =>
      () => {
        if (type === 'next') {
          setIsOperative(true);
          if (storyItemIndex === contentLength) {
            setCurrentIndex(index);

            // carouselRef.current.scrollLeft =
            //   index *
            //   Math.round(
            //     carouselRef.current.offsetWidth * 0.3 +
            //       (67 / 1366) * window.innerWidth
            //   );
          } else {
            if (setContentIndex) setContentIndex((prev) => prev + 1);
          }
        } else if (type === 'prev') {
          setIsOperative(true);
          if (storyItemIndex === 0) {
            setCurrentIndex(index);
            // carouselRef.current.scrollLeft =
            //   index *
            //   Math.round(
            //     carouselRef.current.offsetWidth * 0.3 +
            //       (67 / 1366) * window.innerWidth
            //   );
          } else {
            if (setContentIndex) setContentIndex((prev) => prev - 1);
          }
        } else {
          if (type === 'jump') setIsOperative(true);

          setCurrentIndex(index);

          // carouselRef.current.scrollLeft =
          //   index *
          //   Math.round(
          //     carouselRef.current.offsetWidth * 0.3 +
          //       (67 / 1366) * window.innerWidth
          //   );
        }
      },
    []
  );

  return ReactDOM.createPortal(
    <section className={styles.section}>
      <span
        className={styles['close-icon-box']}
        title="Close"
        onClick={() => setViewStory(false)}
      >
        <IoClose className={styles['close-icon']} />
      </span>

      <div className={styles['story-container']} ref={carouselRef}>
        {currentIndex === 0 && (
          <article className={styles['void-next-story']}></article>
        )}

        {stories
          .slice(currentIndex, currentIndex === 0 ? 2 : currentIndex + 3)
          .map((data, index) => (
            <StoryItem
              key={index}
              itemIndex={index}
              active={index === currentIndex % 3}
              storyIndex={currentIndex}
              isOperative={isOperative}
              moveToStory={moveToStory}
              totalLength={stories.length}
              data={data}
            />
          ))}

        {currentIndex === stories.length - 1 && (
          <article className={styles['void-next-story2']}></article>
        )}
      </div>
    </section>,
    target
  );
};

export default StoryModal;


















import styles from '../styles/StoryItem.module.css';
import { BsDot } from 'react-icons/bs';
import { FaPause, FaPlay } from 'react-icons/fa6';
import {
  BiSolidVolumeMute,
  BiSolidVolumeFull,
  BiSolidErrorAlt,
} from 'react-icons/bi';
import { HiDotsHorizontal } from 'react-icons/hi';
import { FaRegHeart } from 'react-icons/fa';
import { AiOutlineSend } from 'react-icons/ai';
import { useEffect, useRef, useState } from 'react';
import { FaHeart } from 'react-icons/fa';
import { Story } from './StoryModal';
import { MdKeyboardArrowLeft, MdKeyboardArrowRight } from 'react-icons/md';

export interface StoryContent {
  type: 'image' | 'video';
  src: string;
}

type StoryItemProps = {
  active: boolean;
  data: Story;
  itemIndex: number;
  isOperative: boolean;
  totalLength: number;
  storyIndex: number;
  moveToStory: (
    index: number,
    storyItemIndex: number | null,
    contentLength: number | null,
    setContentIndex: React.Dispatch<React.SetStateAction<number>> | null,
    type: 'initial' | 'next' | 'prev' | 'jump'
  ) => () => void;
};

const StoryItem = ({
  active,
  data,
  itemIndex,
  storyIndex,
  isOperative,
  totalLength,
  moveToStory,
}: StoryItemProps) => {
  const { name, time, content } = data;

  const [like, setLike] = useState<boolean>(false);
  const [showMenu, setShowMenu] = useState<boolean>(false);
  const [hideMenu, setHideMenu] = useState<boolean>(true);
  const [mute, setMute] = useState<boolean>(false);
  const [pause, setPause] = useState<boolean>(false);
  const [contentIndex, setContentIndex] = useState<number>(0);
  const [duration, setDuration] = useState<number>(0);
  const [loading, setLoading] = useState<
    boolean | 'error' | 'empty' | 'notfound'
  >(true);

  const itemRef = useRef<HTMLDivElement>(null!);
  const menuRef = useRef<HTMLDivElement>(null!);
  const listRef = useRef<HTMLUListElement>(null!);
  const videoRef = useRef<HTMLVideoElement>(null!);
  const progressRef = useRef<HTMLSpanElement>(null!);

  useEffect(() => {
    if (itemRef.current) {
      if (isOperative) {
        itemRef.current.style.animationDuration = '0.3s';
      }
    }
  });

  useEffect(() => {
    const clickHandler = (e: Event) => {
      if (e.target) {
        if (showMenu && !menuRef.current.contains(e.target as Node)) {
          setShowMenu(false);
        }
      }
    };

    let animation;

    if (listRef.current) {
      if (showMenu) {
        animation = listRef.current.animate(
          {
            height: ['0px', `${listRef.current.scrollHeight}px`],
          },
          {
            fill: 'both',
            duration: 150,
          }
        );
      } else {
        animation = listRef.current.animate(
          {
            height: [`${listRef.current.scrollHeight}px`, '0px'],
          },
          {
            fill: 'both',
            duration: 150,
          }
        );
        animation.onfinish = () => setHideMenu(true);
      }
    }

    window.addEventListener('click', clickHandler);

    return () => {
      window.removeEventListener('click', clickHandler);
    };
  }, [showMenu]);

  useEffect(() => {
    setLoading(true);
    if (content[contentIndex].type === 'video') {
      if (videoRef.current)
        videoRef.current.src = `../../assets/images/content/${content[contentIndex].src}.mp4`;
    }

    setPause(false);
    setDuration(() => {
      if (content[contentIndex].type === 'image') return 7;
      else return 0;
    });
  }, [contentIndex, storyIndex, content]);

  useEffect(() => {
    if (progressRef.current) {
      if (duration > 0)
        progressRef.current.style.animationDuration = `${Math.ceil(duration)}s`;
    }
  }, [duration]);

  useEffect(() => {
    if (videoRef.current) {
      if (pause) videoRef.current.pause();
      else videoRef.current.play();
    }

    if (progressRef.current) {
      if (pause) progressRef.current.style.animationPlayState = 'paused';
      else progressRef.current.style.animationPlayState = 'running';
    }
  }, [pause]);

  const getTime = () => {
    const arr = time.split(' ');

    return `${arr[0]}${arr[1][0]}`;
  };

  const handleVideoDuration = () => {
    if (videoRef.current) {
      setDuration(videoRef.current.duration - videoRef.current.currentTime);
    }
  };

  return active ? (
    <article className={styles['current-story']} ref={itemRef}>
      {!(itemIndex === 0 && contentIndex === 0) && (
        <span
          className={styles['left-arrow-box']}
          onClick={moveToStory(
            itemIndex - 1,
            contentIndex,
            content.length - 1,
            setContentIndex,
            'prev'
          )}
        >
          <MdKeyboardArrowLeft className={styles['left-arrow']} />
        </span>
      )}

      <div className={styles['line-container']}>
        {content.map((item, index) => (
          <span key={`${index}-${item.type}`} className={styles['line-box']}>
            <span
              className={`${styles['line-item']} ${
                index < contentIndex ? styles['viewed-item'] : ''
              } ${index === contentIndex ? styles['current-viewed-item'] : ''}`}
              ref={index === contentIndex ? progressRef : null}
              onAnimationEnd={moveToStory(
                itemIndex + 1,
                contentIndex,
                content.length - 1,
                setContentIndex,
                'next'
              )}
            >
              &nbsp;
            </span>
          </span>
        ))}
      </div>

      <div className={styles['details-box']}>
        <div className={styles['story-details']}>
          <span className={styles['name-box']}>
            <img
              className={styles['user-pic']}
              src={`../../assets/images/users/user${itemIndex + 1}.jpeg`}
            />
            <span className={styles['user-name']}>{name}</span>
          </span>
          <BsDot className={styles.dot} />
          <time className={styles['time-sent']}>{getTime()}</time>
        </div>

        <div className={styles['menu-details']}>
          {content[contentIndex].type === 'video' && (
            <>
              {mute ? (
                <BiSolidVolumeMute
                  className={styles['mute-icon']}
                  onClick={() => setMute(false)}
                />
              ) : (
                <BiSolidVolumeFull
                  className={styles['mute-icon']}
                  onClick={() => setMute(true)}
                />
              )}
            </>
          )}

          {pause ? (
            <FaPlay
              className={styles['pause-icon']}
              onClick={() => setPause(false)}
            />
          ) : (
            <FaPause
              className={styles['pause-icon']}
              onClick={() => setPause(true)}
            />
          )}

          <div className={styles['menu-div']} ref={menuRef}>
            <HiDotsHorizontal
              className={`${styles['menu-icon']} ${
                showMenu ? styles['active-menu'] : ''
              }`}
              onClick={() => {
                setShowMenu(!showMenu);
                setHideMenu(false);
              }}
            />

            {!hideMenu && (
              <ul className={styles['menu-list']} ref={listRef}>
                <li className={styles['menu-item']}>Follow</li>
                <li className={styles['menu-item']}>Report</li>
                <li className={styles['menu-item']}>Hide story</li>
              </ul>
            )}
          </div>
        </div>
      </div>

      <div className={styles['content-div']}>
        {content[contentIndex].type === 'image' ? (
          <img
            className={`${styles.content} ${
              loading ? styles['hide-item'] : ''
            }`}
            src={`../../assets/images/content/${content[contentIndex].src}.jpeg`}
            onLoad={() => setLoading(false)}
            onError={() => setLoading('error')}
            onAbort={() => setLoading('error')}
          />
        ) : (
          <video
            className={`${styles.content} ${
              loading ? styles['hide-item'] : ''
            }`}
            ref={videoRef}
            autoPlay
            muted={mute}
            onLoadedMetadata={handleVideoDuration}
            onCanPlay={() => setLoading(false)}
            onError={() => setLoading('error')}
            onAbort={() => setLoading('error')}
            onEmptied={() => setLoading('notfound')}
            onStalled={() => setLoading('empty')}
          >
            <source
              src={`../../assets/images/content/${content[contentIndex].src}.mp4`}
              type="video/mp4"
            />
            Your browser does not support playing video.
          </video>
        )}

        {loading === true ? (
          <div className={styles.loader}></div>
        ) : loading === 'error' ? (
          <span className={styles['error-box']}>
            <BiSolidErrorAlt className={styles['error-icon']} />
            An error occured while loading media.
          </span>
        ) : loading === 'empty' ? (
          <span className={styles['error-box']}>
            <BiSolidErrorAlt className={styles['error-icon']} />
            Unable to load media.
          </span>
        ) : loading === 'notfound' &&
          videoRef.current.src ===
            `../../assets/images/content/${content[contentIndex].src}.mp4` ? (
          <span className={styles['error-box']}>
            <BiSolidErrorAlt className={styles['error-icon']} />
            This media no longer exists.
          </span>
        ) : (
          ''
        )}
      </div>

      <div className={styles['reply-div']}>
        <input
          className={styles['reply-input']}
          type="text"
          placeholder="Reply privately...."
        />

        {like ? (
          <FaHeart
            className={styles['like-icon2']}
            onClick={() => setLike(false)}
          />
        ) : (
          <FaRegHeart
            className={styles['like-icon']}
            onClick={() => setLike(true)}
          />
        )}

        <AiOutlineSend className={styles['send-icon']} />
      </div>

      {!(
        itemIndex === totalLength - 1 && contentIndex === content.length - 1
      ) && (
        <span
          className={styles['right-arrow-box']}
          onClick={moveToStory(
            itemIndex + 1,
            contentIndex,
            content.length - 1,
            setContentIndex,
            'next'
          )}
        >
          <MdKeyboardArrowRight className={styles['right-arrow']} />
        </span>
      )}
    </article>
  ) : (
    <article className={styles['next-story']}>
      <div
        className={styles['next-content-div']}
        onClick={moveToStory(itemIndex, null, null, null, 'jump')}
      >
        {content[0].type === 'image' ? (
          <img
            className={styles['next-content']}
            src={`../../assets/images/content/${content[0].src}.jpeg`}
          />
        ) : (
          <video className={styles['next-content']} autoPlay muted>
            <source
              src={`../../assets/images/content/${content[0].src}.mp4`}
              type="video/mp4"
            />
            Your browser does not support playing video.
          </video>
        )}

        <div className={styles['next-story-content']}>
          <time className={styles['next-story-time']}>{time}</time>
          <span className={styles['next-story-img-box']}>
            <img
              className={styles['next-story-img']}
              src={`../../assets/images/users/user${itemIndex + 1}.jpeg`}
            />
          </span>
          <span className={styles['next-story-username']}>{name}</span>
        </div>
      </div>
    </article>
  );
};
export default StoryItem;


